interface MiniUser {
    id: ID!
    email: String!
}

type QuestionUserPrivileges {
    isEditable: Boolean
}

enum QuestionType {
    NUMERIC, YESNO
}

type Question {
    id: ID!
    text: String!
    privileges: QuestionUserPrivileges,
    questionType: QuestionType!
}

type Form {
    id: ID!
    title: String!
    questions: [Question]!
    isEditable: Boolean
}

type Answer {
    participantId: ID!
    questionId: ID!
    value: Int
}

type Participant implements MiniUser {
    id: ID!
    email: String!
    answers: [Answer] # special privileges
    isComplete: Boolean
}

type SurveyCountingSummary {
    nbParticipants: Int
    nbAnsweringParticipants: Int
}

type OwnSurveyStatus {
    completedAnswers: Boolean
}

type AnswersSummary {
    questionId: Int!
    content: String!
}

type Survey {
    id: ID!
    form: Form!
    name: String!
    participants: [Participant]
    summary: SurveyCountingSummary # supervisors only
    ownStatus: OwnSurveyStatus # participants only
    answersSum: [AnswersSummary]
}

type User {
    id: ID!
    email: String!
    groups: [UserGroup]!
}

type UserGroup {
    id: ID!
    name: String!
    users: [User]!
}

enum SurveyStatus {
    ONGOING,
    CLOSED,
    IN_CREATION,
}

type Query {
    questions: [Question]!
    countQuestions: Long!
    question(id: Int): Question
    forms: [Form]!
    form(formId: ID): Form
    survey(id: ID): Survey
    surveys(status: SurveyStatus, participantId: ID, isParticipating: Boolean): [Survey]!
    users: [User]!
    user(id: ID): User
    userGroups: [UserGroup]!
    userGroup(id: ID!): UserGroup
    answers(surveyId: ID!, userId: ID!): [Answer]!
}

input InputQuestion {
    text: String!
    id: Int
    questionType: QuestionType
}

type Mutation {
    createForm(title: String!): Form
    createSurvey(formId: ID!, name: String!): Survey
    startSurvey(surveyId: ID!): Boolean
    createUserGroup(name: String!): UserGroup
    addUserToGroup(userId: ID!, userGroupId: ID!): User
    addUserGroupToSurvey(userGroupId: ID!, survey: ID!): Boolean
#    addQuestion(input: InputQuestion): Question
    removeQuestionFromForm(questionId: ID!, formId: ID!): Form
    updateAnswer(surveyId: ID!, userId: ID!, questionId: ID!, value: Int!): Answer
    createFormQuestion(input: InputQuestion!, formId: ID!): Question
    addQuestionToForm(formId: Int, questionId: Int): Form
    updateQuestion(input: InputQuestion!): Form
    swapQuestionOnForm(formId: ID!, questionId: ID!, destSpotNumber: Int!): Form
}