interface MiniUser {
    id: ID!
    email: String!
}

type Question {
    id: ID!
    text: String!
    number: Int
}

type Form {
    id: ID!
    title: String!
    questions: [Question]!
    isEditable: Boolean
}

type Answer {
    participantId: ID!
    questionId: ID!
    value: Int
}

type Participant implements MiniUser {
    id: ID!
    email: String!
    answers: [Answer]
}

#type SurveySummary {
#    numberOfParticipants: Int
#}

type Survey {
    id: ID!
    form: Form!
    name: String!
    participants: [Participant]
}

type User {
    id: ID!
    email: String!
}

type UserGroup {
    id: ID!
    name: String!
    users: [User]!
}

enum SurveyStatus {
    ONGOING,
    CLOSED
}

type Query {
    questions: [Question]!
    countQuestions: Long!
    question(id: Int): Question
    forms: [Form]!
    form(formId: ID): Form
    survey(id: Int): Survey
    surveys(status: SurveyStatus): [Survey]!
    users: [User]!
    userGroups: [UserGroup]!
    userGroup(id: ID!): UserGroup
}

input InputQuestion {
    text: String!
}

type Mutation {
    createForm(title: String!): Form
    createUserGroup(name: String!): UserGroup
    addUserToGroup(userId: ID!, userGroupId: ID!): UserGroup
    addUserGroupToSurvey(userGroupId: ID!, survey: ID!): Boolean
    addQuestion(input: InputQuestion): Question
    createFormQuestion(input: InputQuestion!, formId: ID!): Question
    addQuestionToForm(formId: Int, questionId: Int): Form
}